using GitHelper_1.Models;
using GitHelper_1.Utilities;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using Swashbuckle.Swagger;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web;
using System.Web.Http;
using System.Web.Mvc;
using ActionNameAttribute = System.Web.Http.ActionNameAttribute;
using HttpGetAttribute = System.Web.Http.HttpGetAttribute;
using HttpPostAttribute = System.Web.Http.HttpPostAttribute;
using RouteAttribute = System.Web.Http.RouteAttribute;

namespace GitHelper_1.Controllers
{
    public class LoginController : ApiController
    {
        CookieManager cookieManager = new CookieManager();

        [HttpPost]
        public HttpResponseMessage AuthenticateUser([FromBody] JObject data)
        {
            var username = data["username"].ToString();
            var token = data["token"].ToString();
            //check validity of the credentials
            bool isValidCredential = IsValidCredentials(username, token);
            
            if (isValidCredential)
            {
                //check aunthenticity of the credentials
                bool isValidUser = false; //AuthenticateTokenAndGetClient(username, token);

                if (isValidUser)
                {
                    //create cookie
                    //cookieManager.CreateCookie(username, token,Response);
                    /*System.Web.HttpCookie userInfo = new System.Web.HttpCookie("userInfo");
                    userInfo["username"] = username;
                    userInfo["token"] = token;
                    userInfo.Expires.Add(new TimeSpan(0, 1, 0));
                    Response.Cookies.Add(userInfo);*/

                    return Request.CreateResponse(HttpStatusCode.OK, 
                        JsonConvert.SerializeObject(new Dictionary<string, string>()
                                                { {"status","Success"},
                                                    {"message","Authentication Successful"} }));
                }
                else
                {
                    //return appropriate message for failure
                    return Request.CreateResponse(HttpStatusCode.OK,
                        JsonConvert.SerializeObject(new Dictionary<string, string>()
                                                { {"status","Failure"},
                                                    {"message","Bad Credentials"} }));

                }
            }
            //return appropriate message for failure
            return Request.CreateResponse(HttpStatusCode.OK, 
                JsonConvert.SerializeObject(new Dictionary<string, string>()
                        { {"status","Failure"},
                             {"message","Wrong format for username or personal access token"} }));
        }


        [HttpGet]
        [ActionName("Logout")]
        public string Logout()
        {
            //erase cookie data of current user

            //return successful logout confirmation
            return "You have successfully logged out!";
        }

        public bool IsValidCredentials(String username, String token)
        {
            //username and token should not be empty
            if (String.IsNullOrEmpty(username) || String.IsNullOrEmpty(token))
                return false;

            /*
                Github username may only contain alphanumeric characters or hyphens.
                Github username cannot have multiple consecutive hyphens.
                Github username cannot begin or end with a hyphen.
                Maximum is 39 characters.*/
            

            if (username.Length > 39 || username.StartsWith("-") || username.EndsWith("-"))
                return false;

            string temporary = username.ToLower();
            for (int i = 0; i < temporary.Length; i++)
            {
                if (!(temporary[i] >= 'a' && temporary[i] <= 'z'))
                {
                    if (!(temporary[i] >= '0' && temporary[i] <= '9'))
                    {
                        if (!temporary[i].Equals('-'))
                        {
                            return false;
                        }
                        else
                        {
                            if (i < temporary.Length - 1 && temporary[i + 1].Equals('-'))
                            {
                                return false;
                            }
                        }
                    }
                }

            }

            //Tokens generated by GitHub are 43 characters in length
            if (!(token.Length==40 || token.Length== 43))
                return false;

            return true;
        }
    }
}

